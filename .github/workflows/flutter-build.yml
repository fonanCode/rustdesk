name: Build the flutter version of the RustDesk

on:
  workflow_dispatch:
    inputs:
      rename:
        description: 'rename to'
        required: false
      key:
        description: 'public key'
        required: false
      host:
        description: 'host'
        required: false
      platforms:
        description: 'platforms, e.g. windows,macos,linux'
        default: 'windows,linux,macos'
        required: false
      extra-args-for-sciter-windows:
        description: '--features "virtual-display"'
        required: false
  workflow_call:
    inputs:
      upload-artifact:
        type: boolean
        default: true
      upload-tag:
        type: string
        default: "nightly"

env:
  SCITER_RUST_VERSION: "1.75" # https://github.com/rustdesk/rustdesk/discussions/7503, also 1.78 has ABI change which causes our sciter version not working, https://blog.rust-lang.org/2024/03/30/i128-layout-update.html
  RUST_VERSION: "1.75" # sciter failed on m1 with 1.78 because of https://blog.rust-lang.org/2024/03/30/i128-layout-update.html
  MAC_RUST_VERSION: "1.81" # 1.81 is required for macos, because of https://github.com/yury/cidre requires 1.81
  CARGO_NDK_VERSION: "3.1.2"
  SCITER_ARMV7_CMAKE_VERSION: "3.29.7"
  SCITER_WASM_EMVERSION: "2.1.14-1"
  LLVM_VERSION: "15.0.6"
  FLUTTER_VERSION: "3.24.5"
  ANDROID_FLUTTER_VERSION: "3.24.5"
  # for arm64 linux, because official Dart SDK does not work
  FLUTTER_ELINUX_VERSION: "3.16.9"
  TAG_NAME: "${{ inputs.upload-tag }}"
  # https://github.com/rustdesk/rustdesk/pull/4949#issuecomment-1647413642
  VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
  VCPKG_FEATURE_FLAGS: "manifests,versions,binarycaching,registries"
  VCPKG_BINARY_SOURCES: "clear;files,${{ github.workspace }}/vcpkg_cache,readwrite"
  RUSTDESK_RELAY_SERVER: "${{ inputs.host || secrets.RUSTDESK_RELAY_SERVER }}"
  RUSTDESK_ID_SERVER: "${{ inputs.host || secrets.RUSTDESK_ID_SERVER }}"
  RUSTDESK_KEY: "${{ inputs.key || secrets.RUSTDESK_KEY }}"
  RUSTDESK_NAME: "${{ inputs.rename }}"
  RUSTDESK_ARGS: ${{ inputs.extra-args-for-sciter-windows }}

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: windows-x64
            os: windows-2019
          - name: macos-x64
            os: macos-12
          - name: macos-arm64
            os: macos-14 # we have to use macos-14 for arm64
          - name: linux-x64
            os: ubuntu-22.04
          - name: linux-arm64
            os: ubuntu-22.04
    if: ${{ contains(inputs.platforms || 'windows,linux,macos', matrix.name) }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - name: Install dependencies on macOS
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: |
          brew install llvm nasm
          echo "/usr/local/opt/llvm/bin" >> $GITHUB_PATH
      - name: Install dependencies on Linux
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libxdo-dev libxfixes-dev libxrandr-dev libxtst-dev libavutil-dev libavcodec-dev libavformat-dev libgtk-3-dev libappindicator3-dev librust-alsa-sys-dev libasound2-dev libsystemd-dev
      - name: Cache vcpkg
        if: ${{ matrix.name == 'windows-x64' }}
        uses: actions/cache@v4
        with:
          path: ${{ env.VCPKG_ROOT }}
          key: vcpkg-root-v1
      - name: Setup vcpkg
        if: ${{ matrix.name == 'windows-x64' }}
        run: |
          git -C ${{ env.VCPKG_ROOT }} pull || git clone https://github.com/microsoft/vcpkg ${{ env.VCPKG_ROOT }}
          ${{ env.VCPKG_ROOT }}/bootstrap-vcpkg.bat
      - name: Setup flutter for eLinux
        if: ${{ matrix.name == 'linux-arm64' }}
        run: |
          wget https://github.com/sony/flutter-elinux/releases/download/v${{ env.FLUTTER_ELINUX_VERSION }}/flutter-elinux-${{ env.FLUTTER_ELINUX_VERSION }}.zip -O flutter-elinux.zip
          unzip flutter-elinux.zip
          echo "${{ github.workspace }}/flutter-elinux/bin" >> $GITHUB_PATH
          sudo apt install -y clang cmake ninja-build pkg-config
      - name: Setup rust for macOS
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${{ env.MAC_RUST_VERSION }}
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      - name: Setup rust for non-macOS
        if: ${{ !startsWith(matrix.os, 'macos') }}
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${{ env.RUST_VERSION }}
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      - name: Setup flutter
        if: ${{ matrix.name != 'linux-arm64' }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "${{ env.FLUTTER_VERSION }}"
          channel: "stable"
          cache: true
      - name: Install cargo-ndk for Android
        if: ${{ matrix.name == 'android' }}
        run: |
          cargo install cargo-ndk --version ${{ env.CARGO_NDK_VERSION }}
      - name: Run build script
        run: |
          cd flutter
          ./build.sh
      - name: Upload artifact
        if: ${{ inputs.upload-artifact }}
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-flutter-${{ matrix.name }}
          path: flutter/build/bundle/
